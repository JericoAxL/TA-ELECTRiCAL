#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <Servo.h>
#include <Fuzzy.h>
#include <FuzzyComposition.h>
#include <FuzzyInput.h>
#include <FuzzyIO.h>
#include <FuzzyOutput.h>
#include <FuzzyRule.h>
#include <FuzzyRuleAntecedent.h>
#include <FuzzyRuleConsequent.h>
#include <FuzzySet.h>

// NRF24L01
#define CE_PIN 48
#define CSN_PIN 49
RF24 radio(CE_PIN, CSN_PIN);
const byte address[6] = "00001";

// Struct data dari TX
struct DataPacket {
  int motorSpeed;
  int servoAngle;
} data;

// Servo
Servo steerServo;
#define SERVO_PIN 13

// Ultrasonic
const int trigPin = 6;
const int echoPin = 5;

// Encoder
const int encoderPin = 2;
volatile unsigned int pulseCount = 0;
unsigned long lastTime = 0;
float speedRPM = 0;

// Motor Driver
const int ENA = 9, IN1 = 8, IN2 = 7;
const int ENB = 10, IN3 = 12, IN4 = 11;

Fuzzy *fuzzy = new Fuzzy();

void countPulse() {
  pulseCount++;
}

void setup() {
  Serial.begin(9600);

  // NRF24
  if (!radio.begin()) {
    Serial.println("NRF24L01 Tidak Terdeteksi!");
    while (1);
  }
  radio.openReadingPipe(1, address);
  radio.setPALevel(RF24_PA_LOW);
  radio.setDataRate(RF24_250KBPS);
  radio.startListening();
  Serial.println("NRF24L01 RX Siap!");

  // Servo
  steerServo.attach(SERVO_PIN);
  steerServo.write(90); // posisi default

  // Pins
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(encoderPin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(encoderPin), countPulse, RISING);
  pinMode(ENA, OUTPUT); pinMode(IN1, OUTPUT); pinMode(IN2, OUTPUT);
  pinMode(ENB, OUTPUT); pinMode(IN3, OUTPUT); pinMode(IN4, OUTPUT);
  analogWrite(ENA, 0); analogWrite(ENB, 0);

  // Fuzzy Setup (sama seperti sebelumnya, tidak diubah)
  FuzzyInput *kecepatan = new FuzzyInput(1);
  FuzzySet *kecepatanSet[5] = {
    new FuzzySet(0, 0, 10, 30),
    new FuzzySet(10, 30, 40, 50),
    new FuzzySet(40, 50, 60, 70),
    new FuzzySet(60, 70, 80, 90),
    new FuzzySet(80, 90, 100, 100)
  };
  for (int i = 0; i < 5; i++) kecepatan->addFuzzySet(kecepatanSet[i]);
  fuzzy->addFuzzyInput(kecepatan);

  FuzzyInput *jarak = new FuzzyInput(2);
  FuzzySet *jarakSet[5] = {
    new FuzzySet(0, 0, 5, 10),
    new FuzzySet(5, 10, 15, 20),
    new FuzzySet(15, 20, 30, 35),
    new FuzzySet(30, 35, 40, 45),
    new FuzzySet(40, 45, 50, 50)
  };
  for (int i = 0; i < 5; i++) jarak->addFuzzySet(jarakSet[i]);
  fuzzy->addFuzzyInput(jarak);

  FuzzyOutput *pengereman = new FuzzyOutput(1);
  FuzzySet *remSet[5] = {
    new FuzzySet(0, 0, 10, 20),
    new FuzzySet(10, 20, 30, 40),
    new FuzzySet(30, 40, 50, 60),
    new FuzzySet(50, 60, 70, 80),
    new FuzzySet(70, 80, 100, 100)
  };
  for (int i = 0; i < 5; i++) pengereman->addFuzzySet(remSet[i]);
  fuzzy->addFuzzyOutput(pengereman);

  int ruleNum = 1;
  for (int i = 0; i < 5; i++) {
    for (int j = 0; j < 5; j++) {
      FuzzyRuleAntecedent *ant = new FuzzyRuleAntecedent();
      ant->joinWithAND(kecepatanSet[i], jarakSet[j]);
      FuzzyRuleConsequent *cons = new FuzzyRuleConsequent();
      int remIndex = constrain(i + (4 - j), 0, 4);
      cons->addOutput(remSet[remIndex]);
      fuzzy->addFuzzyRule(new FuzzyRule(ruleNum++, ant, cons));
    }
  }
}

void loop() {
  // Terima data dari NRF
  if (radio.available()) {
    radio.read(&data, sizeof(data));
  }

  // Servo steer
  steerServo.write(constrain(data.servoAngle, 0, 180));

  // Jarak dari ultrasonic
  digitalWrite(trigPin, LOW); delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH, 30000);
  int distance = duration * 0.034 / 2;
  distance = constrain(distance, 0, 50);

  // Hitung RPM dari encoder
  unsigned long now = millis();
  if (now - lastTime >= 1000) {
    speedRPM = (pulseCount / 20.0) * 60.0;
    pulseCount = 0;
    lastTime = now;
  }

  float speedMapped = constrain(speedRPM, 0, 100);
  fuzzy->setInput(1, speedMapped);
  fuzzy->setInput(2, distance);
  fuzzy->fuzzify();
  int brakeValue = fuzzy->defuzzify(1);
  int brakePWM = map(brakeValue, 0, 100, 255, 0);
  if (distance <= 5) brakePWM = 0;
  brakePWM = constrain(brakePWM, 0, 255);

  int finalPWM = (distance < 50) ? brakePWM : data.motorSpeed;

  // Aktifkan motor
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  analogWrite(ENA, finalPWM);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
  analogWrite(ENB, finalPWM);

  // Debug
  Serial.println("=== RX MEGA ===");
  Serial.print("Motor Speed (PWM): "); Serial.println(data.motorSpeed);
  Serial.print("Servo Angle: "); Serial.println(data.servoAngle);
  Serial.print("RPM: "); Serial.println(speedRPM);
  Serial.print("Distance: "); Serial.println(distance);
  Serial.print("Final PWM: "); Serial.println(finalPWM);
  Serial.println("================");

  delay(100);
}
