#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <Fuzzy.h>

// NRF24L01 Setup
#define CE_PIN 9
#define CSN_PIN 8
RF24 radio(CE_PIN, CSN_PIN);
const byte address[6] = "00001";

struct DataPacket {
  int motorSpeed;
  int servoAngle;
} data;

// Ultrasonic Pins
const int trigPin = 6;
const int echoPin = 5;

// Encoder Pin
const int encoderPin = 2;

// Motor Driver Pins (Motor B)
const int ENB = 10;
const int IN3 = 12;
const int IN4 = 11;

// Fuzzy Logic
Fuzzy *fuzzy = new Fuzzy();
FuzzySet *kecepatanSet[5], *jarakSet[5], *remSet[5];

// Encoder
volatile unsigned int pulseCount = 0;
unsigned long lastTime = 0;
float speedRPM = 0;

// Interrupt
void countPulse() {
  pulseCount++;
}

void setup() {
  Serial.begin(115200);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(encoderPin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(encoderPin), countPulse, RISING);

  pinMode(ENB, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  analogWrite(ENB, 0);

  // NRF24L01 Setup
  if (!radio.begin()) {
    Serial.println("NRF ❌");
    while (1);
  }
  radio.openReadingPipe(0, address);
  radio.setPALevel(RF24_PA_LOW);
  radio.setDataRate(RF24_250KBPS);
  radio.startListening();
  Serial.println("NRF ✅ RX OK");

  // Fuzzy Input - Kecepatan
  FuzzyInput *kecepatan = new FuzzyInput(1);
  kecepatanSet[0] = new FuzzySet(0, 0, 10, 30);
  kecepatanSet[1] = new FuzzySet(10, 30, 40, 50);
  kecepatanSet[2] = new FuzzySet(40, 50, 60, 70);
  kecepatanSet[3] = new FuzzySet(60, 70, 80, 90);
  kecepatanSet[4] = new FuzzySet(80, 90, 100, 100);
  for (int i = 0; i < 5; i++) kecepatan->addFuzzySet(kecepatanSet[i]);
  fuzzy->addFuzzyInput(kecepatan);

  // Fuzzy Input - Jarak
  FuzzyInput *jarak = new FuzzyInput(2);
  jarakSet[0] = new FuzzySet(0, 0, 5, 10);
  jarakSet[1] = new FuzzySet(5, 10, 15, 20);
  jarakSet[2] = new FuzzySet(15, 20, 30, 35);
  jarakSet[3] = new FuzzySet(30, 35, 40, 45);
  jarakSet[4] = new FuzzySet(40, 45, 50, 50);
  for (int i = 0; i < 5; i++) jarak->addFuzzySet(jarakSet[i]);
  fuzzy->addFuzzyInput(jarak);

  // Fuzzy Output - Pengereman
  FuzzyOutput *pengereman = new FuzzyOutput(1);
  remSet[0] = new FuzzySet(0, 0, 10, 20);
  remSet[1] = new FuzzySet(10, 20, 30, 40);
  remSet[2] = new FuzzySet(30, 40, 50, 60);
  remSet[3] = new FuzzySet(50, 60, 70, 80);
  remSet[4] = new FuzzySet(70, 80, 100, 100);
  for (int i = 0; i < 5; i++) pengereman->addFuzzySet(remSet[i]);
  fuzzy->addFuzzyOutput(pengereman);

  // Fuzzy Rules
  int ruleNum = 1;
  for (int i = 0; i < 5; i++) {
    for (int j = 0; j < 5; j++) {
      FuzzyRuleAntecedent *ant = new FuzzyRuleAntecedent();
      ant->joinWithAND(kecepatanSet[i], jarakSet[j]);

      int remIndex = constrain(i + (4 - j), 0, 4);
      FuzzyRuleConsequent *con = new FuzzyRuleConsequent();
      con->addOutput(remSet[remIndex]);

      fuzzy->addFuzzyRule(new FuzzyRule(ruleNum++, ant, con));
    }
  }
}

void loop() {
  // Terima data dari NRF
  int targetPWM = 0;
  int servoAngle = 90;
  if (radio.available()) {
    radio.read(&data, sizeof(data));
    targetPWM = map(data.motorSpeed, 0, 1023, 0, 255);
    servoAngle = data.servoAngle;
  }

  // Baca jarak ultrasonic
  digitalWrite(trigPin, LOW); delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long dur = pulseIn(echoPin, HIGH, 30000);
  int distance = dur * 0.034 / 2;
  distance = constrain(distance, 0, 50);

  // Hitung kecepatan dari encoder tiap 1 detik
  unsigned long now = millis();
  if (now - lastTime >= 1000) {
    speedRPM = (pulseCount / 20.0) * 60.0;
    pulseCount = 0;
    lastTime = now;
  }

  // Fuzzy Logic
  float speedMapped = constrain(speedRPM, 0, 100);
  fuzzy->setInput(1, speedMapped);
  fuzzy->setInput(2, distance);
  fuzzy->fuzzify();
  int brakeVal = fuzzy->defuzzify(1);
  int brakePWM = map(brakeVal, 0, 100, 255, 0);
  if (distance <= 5) brakePWM = 0;
  brakePWM = constrain(brakePWM, 0, 255);

  int finalPWM = (distance < 50) ? brakePWM : targetPWM;

  // Aktifkan Motor B
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, finalPWM);

  // Print singkat untuk kecepatan tinggi
  Serial.print("PWM:"); Serial.print(targetPWM);
  Serial.print(" | RPM:"); Serial.print(speedRPM, 1);
  Serial.print(" | Jarak:"); Serial.print(distance);
  Serial.print(" | Rem:"); Serial.print(brakeVal);
  Serial.print(" | OutPWM:"); Serial.println(finalPWM);

  delay(0); // Lebih cepat
}
