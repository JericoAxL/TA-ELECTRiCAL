#include <Fuzzy.h>
#include <FuzzyComposition.h>
#include <FuzzyInput.h>
#include <FuzzyIO.h>
#include <FuzzyOutput.h>
#include <FuzzyRule.h>
#include <FuzzyRuleAntecedent.h>
#include <FuzzyRuleConsequent.h>
#include <FuzzySet.h>

// Pin Ultrasonic
const int trigPin = 6;
const int echoPin = 5;

// Pin Rotary Encoder HC-020K
const int encoderPin = 2;

// Pin Motor Driver L298N (Motor A)
const int ENA = 9;
const int IN1 = 8;
const int IN2 = 7;

// Pin Motor Driver L298N (Motor B)
const int ENB = 10;
const int IN3 = 12;
const int IN4 = 11;

// Potensiometer
const int potPin = A0;

// Encoder Variables
volatile unsigned int pulseCount = 0;
unsigned long lastTime = 0;
float speedRPM = 0;

Fuzzy *fuzzy = new Fuzzy();

void countPulse() {
  pulseCount++;
}

void setup() {
  Serial.begin(9600);

  // Setup Pins
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(encoderPin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(encoderPin), countPulse, RISING);

  pinMode(ENA, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(potPin, INPUT);

  analogWrite(ENA, 0);
  analogWrite(ENB, 0);

  // Inisialisasi Fuzzy
  FuzzyInput *kecepatan = new FuzzyInput(1);
  FuzzySet *kecepatanSet[5] = {
    new FuzzySet(0, 0, 10, 30),
    new FuzzySet(10, 30, 40, 50),
    new FuzzySet(40, 50, 60, 70),
    new FuzzySet(60, 70, 80, 90),
    new FuzzySet(80, 90, 100, 100)
  };
  for (int i = 0; i < 5; i++) kecepatan->addFuzzySet(kecepatanSet[i]);
  fuzzy->addFuzzyInput(kecepatan);

  FuzzyInput *jarak = new FuzzyInput(2);
  FuzzySet *jarakSet[5] = {
    new FuzzySet(0, 0, 5, 10),
    new FuzzySet(5, 10, 15, 20),
    new FuzzySet(15, 20, 30, 35),
    new FuzzySet(30, 35, 40, 45),
    new FuzzySet(40, 45, 50, 50)
  };
  for (int i = 0; i < 5; i++) jarak->addFuzzySet(jarakSet[i]);
  fuzzy->addFuzzyInput(jarak);

  FuzzyOutput *pengereman = new FuzzyOutput(1);
  FuzzySet *remSet[5] = {
    new FuzzySet(0, 0, 10, 20),
    new FuzzySet(10, 20, 30, 40),
    new FuzzySet(30, 40, 50, 60),
    new FuzzySet(50, 60, 70, 80),
    new FuzzySet(70, 80, 100, 100)
  };
  for (int i = 0; i < 5; i++) pengereman->addFuzzySet(remSet[i]);
  fuzzy->addFuzzyOutput(pengereman);

  int ruleNum = 1;
  for (int i = 0; i < 5; i++) {
    for (int j = 0; j < 5; j++) {
      FuzzyRuleAntecedent *antecedent = new FuzzyRuleAntecedent();
      antecedent->joinWithAND(kecepatanSet[i], jarakSet[j]);

      FuzzyRuleConsequent *consequent = new FuzzyRuleConsequent();
      int remIndex = constrain(i + (4 - j), 0, 4);
      consequent->addOutput(remSet[remIndex]);

      FuzzyRule *rule = new FuzzyRule(ruleNum++, antecedent, consequent);
      fuzzy->addFuzzyRule(rule);
    }
  }
}

void loop() {
  // Baca jarak
  digitalWrite(trigPin, LOW); delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH, 30000);
  int distance = duration * 0.034 / 2;
  distance = constrain(distance, 0, 50);

  // Hitung kecepatan dari encoder setiap 1 detik
  unsigned long currentTime = millis();
  if (currentTime - lastTime >= 1000) {
    speedRPM = (pulseCount / 20.0) * 60.0;
    pulseCount = 0;
    lastTime = currentTime;
  }

  // Baca nilai dari potensiometer (target user)
  int potValue = analogRead(potPin); // 0–1023
  int targetPWM = map(potValue, 0, 1023, 0, 255); // 0–255

  float speedMapped = constrain(speedRPM, 0, 100); // Untuk fuzzy

  fuzzy->setInput(1, speedMapped);   // Kecepatan aktual
  fuzzy->setInput(2, distance);      // Jarak
  fuzzy->fuzzify();
  int brakeValue = fuzzy->defuzzify(1); // 0–100

  int brakePWM = map(brakeValue, 0, 100, 255, 0);
  if (distance <= 5) brakePWM = 0;
  brakePWM = constrain(brakePWM, 0, 255);

  // Gunakan fuzzy braking hanya jika jarak < 50 cm
  int finalPWM;
  if (distance < 50) {
    finalPWM = brakePWM;
  } else {
    finalPWM = targetPWM;
  }

  // Aktifkan motor
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  analogWrite(ENA, finalPWM);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
  analogWrite(ENB, finalPWM);

  // Serial Debug
Serial.print("Potensio PWM: "); Serial.print(targetPWM);
Serial.print("   Kecepatan (RPM): "); Serial.print(speedRPM, 2);
Serial.print("   Jarak (cm): "); Serial.print(distance);
Serial.print("   Brake Value: "); Serial.print(brakeValue);
Serial.print("   PWM Motor: "); Serial.println(finalPWM);

  delay(1000);
}
