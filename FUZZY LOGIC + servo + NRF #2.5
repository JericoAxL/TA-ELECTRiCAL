#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <Servo.h>
#include <Fuzzy.h>
#include <FuzzyComposition.h>
#include <FuzzyInput.h>
#include <FuzzyIO.h>
#include <FuzzyOutput.h>
#include <FuzzyRule.h>
#include <FuzzyRuleAntecedent.h>
#include <FuzzyRuleConsequent.h>
#include <FuzzySet.h>

// NRF24L01
#define CE_PIN 9
#define CSN_PIN 8
RF24 radio(CE_PIN, CSN_PIN);
const byte address[6] = "00001";

struct DataPacket {
  int motorSpeed;
  int servoAngle;
} data;

// Servo
Servo steerServo;

// Ultrasonic Pins
const int trigPin = 6;
const int echoPin = 5;

// Encoder Pin
const int encoderPin = 2;

// Motor Driver
const int ENB = 10;
const int IN3 = 12;
const int IN4 = 11;

volatile unsigned int pulseCount = 0;
unsigned long lastTime = 0;
float speedRPM = 0;

// Fuzzy
Fuzzy *fuzzy = new Fuzzy();
FuzzySet *kecepatanSet[5];
FuzzySet *jarakSet[5];
FuzzySet *remSet[5];

void countPulse() {
  pulseCount++;
}

void setup() {
  Serial.begin(9600);

  // NRF Setup
  if (!radio.begin()) {
    Serial.println("❌ NRF24L01 tidak terdeteksi!");
    while (1);
  }
  radio.openReadingPipe(0, address);
  radio.setPALevel(RF24_PA_LOW);
  radio.setDataRate(RF24_250KBPS);
  radio.startListening();
  Serial.println("✅ NRF24L01 Siap menerima...");

  // Pin Setup
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(encoderPin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(encoderPin), countPulse, RISING);

  pinMode(ENB, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  analogWrite(ENB, 0);

  steerServo.attach(13);

  // ==== Fuzzy Logic ====
  // Input Kecepatan
  FuzzyInput *kecepatan = new FuzzyInput(1);
  kecepatanSet[0] = new FuzzySet(0, 0, 10, 30);       // Sangat_Lambat
  kecepatanSet[1] = new FuzzySet(10, 30, 40, 50);     // Lambat
  kecepatanSet[2] = new FuzzySet(40, 50, 60, 70);     // Sedang
  kecepatanSet[3] = new FuzzySet(60, 70, 80, 90);     // Cepat
  kecepatanSet[4] = new FuzzySet(80, 90, 100, 100);   // Sangat_Cepat
  for (int i = 0; i < 5; i++) kecepatan->addFuzzySet(kecepatanSet[i]);
  fuzzy->addFuzzyInput(kecepatan);

  // Input Jarak
  FuzzyInput *jarak = new FuzzyInput(2);
  jarakSet[0] = new FuzzySet(0, 0, 5, 10);        // Sangat_Dekat
  jarakSet[1] = new FuzzySet(5, 10, 15, 20);      // Dekat
  jarakSet[2] = new FuzzySet(15, 20, 30, 35);     // Sedang
  jarakSet[3] = new FuzzySet(30, 35, 40, 45);     // Jauh
  jarakSet[4] = new FuzzySet(40, 45, 50, 50);     // Sangat_Jauh
  for (int i = 0; i < 5; i++) jarak->addFuzzySet(jarakSet[i]);
  fuzzy->addFuzzyInput(jarak);

  // Output Pengereman
  FuzzyOutput *pengereman = new FuzzyOutput(1);
  remSet[0] = new FuzzySet(0, 0, 10, 20);       // Sangat_Kecil
  remSet[1] = new FuzzySet(10, 20, 30, 40);     // Kecil
  remSet[2] = new FuzzySet(30, 40, 50, 60);     // Sedang
  remSet[3] = new FuzzySet(50, 60, 70, 80);     // Besar
  remSet[4] = new FuzzySet(70, 80, 100, 100);   // Sangat_Besar
  for (int i = 0; i < 5; i++) pengereman->addFuzzySet(remSet[i]);
  fuzzy->addFuzzyOutput(pengereman);

  // Rules (25 kombinasi)
  int ruleNum = 1;
  for (int i = 0; i < 5; i++) {
    for (int j = 0; j < 5; j++) {
      FuzzyRuleAntecedent *antecedent = new FuzzyRuleAntecedent();
      antecedent->joinWithAND(kecepatanSet[i], jarakSet[j]);

      FuzzyRuleConsequent *consequent = new FuzzyRuleConsequent();
      int remIndex = constrain(i + (4 - j), 0, 4); // logika sederhana
      consequent->addOutput(remSet[remIndex]);

      FuzzyRule *rule = new FuzzyRule(ruleNum++, antecedent, consequent);
      fuzzy->addFuzzyRule(rule);
    }
  }
}

void loop() {
  // Terima data
  if (radio.available()) {
    radio.read(&data, sizeof(data));
  }

  // Ultrasonic
  digitalWrite(trigPin, LOW); delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH, 30000);
  int distance = duration * 0.034 / 2;
  distance = constrain(distance, 0, 50);

  // Kecepatan (dihitung tiap 1 detik)
  unsigned long currentTime = millis();
  if (currentTime - lastTime >= 1000) {
    speedRPM = (pulseCount / 20.0) * 60.0;
    pulseCount = 0;
    lastTime = currentTime;
  }

  // Gunakan nilai TX
  int targetPWM = constrain(data.motorSpeed, 0, 255);

  // Fuzzy Logic
  float speedMapped = constrain(speedRPM, 0, 100);
  fuzzy->setInput(1, speedMapped);
  fuzzy->setInput(2, distance);
  fuzzy->fuzzify();
  int brakeValue = fuzzy->defuzzify(1);

  int brakePWM = map(brakeValue, 0, 100, 255, 0);
  if (distance <= 5) brakePWM = 0;
  brakePWM = constrain(brakePWM, 0, 255);

  // Final PWM
  int finalPWM = (distance < 50) ? brakePWM : targetPWM;

  // Motor Aktif
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, finalPWM);

  // Servo
  steerServo.write(constrain(data.servoAngle, 0, 180));

  // Debug
  Serial.println("==============");
  Serial.print("RPM: "); Serial.println(speedRPM);
  Serial.print("Jarak: "); Serial.println(distance);
  Serial.print("BrakeValue: "); Serial.println(brakeValue);
  Serial.print("PWM Final: "); Serial.println(finalPWM);
  Serial.println("==============");

  delay(100);
}
